//
//  ImagesCollectionViewController.swift
//  MarsWatch
//
//  Created by BRQ on 25/04/19.
//  Copyright (c) 2019 BarbaRuiva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage
import SVProgressHUD

protocol ImagesCollectionDisplayLogic: class
{
    func successGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Success)
    func failureGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Failure)
    func showDetails(response: ImagesCollection.ShowDetails.ViewModel)
}

class ImagesCollectionViewController: UIViewController, ImagesCollectionDisplayLogic
{
    
    var interactor: ImagesCollectionBusinessLogic?
    var router: (NSObjectProtocol & ImagesCollectionRoutingLogic & ImagesCollectionDataPassing)?
    var photosCollection = [ImagesCollection.Photos.ViewModel.PhotosDisplay]()
    
    enum Rovers: String {
        case Curiosity = "curiosity"
        case Opportunity = "opportunity"
        case Spirit = "spirit"
    }
    
    @IBOutlet weak var photosCollectionView: UICollectionView!
    @IBOutlet weak var warningLabel: UILabel!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ImagesCollectionInteractor()
        let presenter = ImagesCollectionPresenter()
        let router = ImagesCollectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
       photosCollectionView.register(UINib(nibName: "PhotosCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "photosCell")
        getPhotoCollection(earthDate: "2015-6-3", rover: .Curiosity)
    }
    
    // MARK: Do something
    @IBOutlet weak var segControl: UISegmentedControl!
    
    
    
    
    @IBAction func indexChange(_ sender: UISegmentedControl) {
        switch segControl.selectedSegmentIndex {
        case 0:
            getPhotoCollection(earthDate: "2015-6-3", rover: .Curiosity)
        case 1:
            getPhotoCollection(earthDate: "2015-6-3", rover: .Opportunity)
        case 2:
            getPhotoCollection(earthDate: "2006-10-27", rover: .Spirit)
        default:
            break
        }
    }
    
    func getPhotoCollection(earthDate: String, rover: Rovers) {
        showSpinner()
        photosCollection = []
        photosCollectionView.reloadData()
        let request = ImagesCollection.Photos.Request()
        interactor?.getPhotos(request: request, earthDate: earthDate, rover: rover.rawValue)
    }
    
    
    func successGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Success) {
        photosCollection = response.items
        print(photosCollection)
        photosCollectionView.reloadData()
        SVProgressHUD.dismiss()
    }
    
    
    func failureGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Failure) {
        let alert = UIAlertController(title: "Alerta!", message: "Houve um erro ao efetuar o donwnload das imagens, verifique sua conex√£o com a internet e tente novamente.", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alert.addAction(okAction)
        present(alert, animated: true) {
            self.errorScene()
        }
        SVProgressHUD.dismiss() 
    }
    
    func errorScene() {
        photosCollectionView.isHidden = true
        warningLabel.text = "Tente novamente em alguns minutos."
    }
    
    func routToDetails(imgName: PhotoCamera, image: String) {
        let request = ImagesCollection.ShowDetails.Request(imgName: imgName, image: image)
        interactor?.showDetails(request: request, imgSrcc: image, imgName: imgName.fullName!)
    }
    
    func showDetails(response: ImagesCollection.ShowDetails.ViewModel) {
        router?.routeToDetails(segue: nil)
    }
    
    func showSpinner(){
        SVProgressHUD.setDefaultAnimationType(.native)
        SVProgressHUD.show()
    }
}
