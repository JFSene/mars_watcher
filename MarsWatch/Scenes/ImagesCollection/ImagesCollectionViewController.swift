//
//  ImagesCollectionViewController.swift
//  MarsWatch
//
//  Created by BRQ on 25/04/19.
//  Copyright (c) 2019 BarbaRuiva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol ImagesCollectionDisplayLogic: class
{
    func successGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Success)
    func failuteGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Failure)
}

class ImagesCollectionViewController: UIViewController, ImagesCollectionDisplayLogic
{
    
    var interactor: ImagesCollectionBusinessLogic?
    var router: (NSObjectProtocol & ImagesCollectionRoutingLogic & ImagesCollectionDataPassing)?
    var photosCollection = [ImagesCollection.Photos.ViewModel.PhotosDisplay]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ImagesCollectionInteractor()
        let presenter = ImagesCollectionPresenter()
        let router = ImagesCollectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getPhotoCollection()
    }
    
    // MARK: Do something
    @IBOutlet weak var segControl: UISegmentedControl!
    @IBOutlet weak var textLabel: UILabel!
    @IBOutlet weak var marsImage: UIImageView!
    
    
    
    
    @IBAction func indexChange(_ sender: UISegmentedControl) {
        switch segControl.selectedSegmentIndex {
        case 0...3:
            getPhotoCollection()
        default:
            break
        }
    }
    
    func getPhotoCollection() {
        let request = ImagesCollection.Photos.Request()
        interactor?.getPhotos(request: request)
    }
    
    
    func successGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Success) {
        photosCollection = response.items
        textLabel.text = response.items[0].camera?.fullName
        marsImage.sd_setImage(with: URL(string: response.items[0].imgSrc!), placeholderImage: UIImage(named: "character"))

        print(photosCollection)
    }
    
    func failuteGetPhotosCollection(response: ImagesCollection.Photos.ViewModel.Failure) {
        let alert = UIAlertController(title: "Alerta!", message: "Houve um erro ao efetuar o donwnload das imagens, verifique sua conex√£o com a internet e tente novamente.", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alert.addAction(okAction)
        present(alert, animated: true, completion: nil)
    }
}
